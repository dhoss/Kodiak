#! /bin/bash


### Environment variables
RAILS_ENV="production"

# Script variable names should be lower-case not to conflict with
# internal /bin/sh variables such as PATH, EDITOR or SHELL.
app_user="kodiak"
app_root="/var/www/$app_user/current"
pid_path="/var/www/kodiak/shared/tmp/puma"
socket_path="/var/www/kodiak/shared/tmp/puma"
web_server_pid_path="$pid_path/puma.pid"

# Read configuration variable file if it is present
#test -f /etc/kodiak && . /etc/kodiak

# Switch to the app_user if it is not he/she who is running the script.
if [ "$USER" != "$app_user" ]; then
  eval su - "$app_user" -c $(echo \")$0 "$@"$(echo \"); exit;
fi

# Switch to the kodiak path, exit on failure.
if ! cd "$app_root" ; then
 echo "Failed to cd into $app_root, exiting!";  exit 1
fi


### Init Script functions

## Gets the pids from the files
check_pids(){
  if ! mkdir -p "$pid_path"; then
    echo "Could not create the path $pid_path needed to store the pids."
    exit 1
  fi
  # If there exists a file which should hold the value of the puma pid: read it.
  if [ -f "$web_server_pid_path" ]; then
    wpid=$(cat "$web_server_pid_path")
  else
    wpid=0
  fi
}

## Called when we have started the two processes and are waiting for their pid files.
wait_for_pids(){
  # We are sleeping a bit here mostly because sidekiq is slow at writing it's pid
  i=0;
  while [ ! -f $web_server_pid_path ]; do
    sleep 0.1;
    i=$((i+1))
    if [ $((i%10)) = 0 ]; then
      echo -n "."
    elif [ $((i)) = 301 ]; then
      echo "Waited 30s for the processes to write their pids, something probably went wrong."
      exit 1;
    fi
  done
  echo
}

# We use the pids in so many parts of the script it makes sense to always check them.
# Only after start() is run should the pids change. Sidekiq sets it's own pid.
check_pids


## Checks whether the different parts of the service are already running or not.
check_status(){
  check_pids
  # If the web server is running kill -0 $wpid returns true, or rather 0.
  # Checks of *_status should only check for == 0 or != 0, never anything else.
  if [ $wpid -ne 0 ]; then
    kill -0 "$wpid" 2>/dev/null
    web_status="$?"
  else
    web_status="-1"
  fi
  if [ $web_status = 0 ]; then
    kodiak_status=0
  else
    # http://refspecs.linuxbase.org/LSB_4.1.0/LSB-Core-generic/LSB-Core-generic/iniscrptact.html
    # code 3 means 'program is not running'
    kodiak_status=3
  fi
}

## Check for stale pids and remove them if necessary.
check_stale_pids(){
  check_status
  # If there is a pid it is something else than 0, the service is running if
  # *_status is == 0.
  if [ "$wpid" != "0" -a "$web_status" != "0" ]; then
    echo "Removing stale puma web server pid. This is most likely caused by the web server crashing the last time it ran."
    if ! rm "$web_server_pid_path"; then
      echo "Unable to remove stale pid, exiting."
      exit 1
    fi
  fi
}

## If no parts of the service is running, bail out.
exit_if_not_running(){
  check_stale_pids
  if [ "$web_status" != "0"  ]; then
    echo "kodiak is not running."
    exit
  fi
}

## Starts puma and Sidekiq if they're not running.
start_kodiak() {
  check_stale_pids

  if [ "$web_status" != "0" ]; then
    echo -n "Starting kodiak puma"
  fi

  # Then check if the service is running. If it is: don't start again.
  if [ "$web_status" = "0" ]; then
    echo "The puma web server already running with pid $wpid, not restarting."
  else
    # Remove old socket if it exists
    rm -f "$socket_path"/kodiak.socket 2>/dev/null
    # Start the web server
    RAILS_ENV=$RAILS_ENV bundle exec puma -e production -C /var/www/kodiak/current/config/puma.rb -b "unix://$socket_path/kodiak.socket"
  fi

  # Wait for the pids to be planted
  wait_for_pids
  # Finally check the status to tell wether or not kodiak is running
  print_status
}

## Asks the puma and the Sidekiq if they would be so kind as to stop, if not kills them.
stop_kodiak() {
  exit_if_not_running

  if [ "$web_status" = "0" ]; then
    echo -n "Shutting down puma"
  fi

  # If the puma web server is running, tell it to stop;
  if [ "$web_status" = "0" ]; then
     RAILS_ENV=$RAILS_ENV bundle exec puma stop
  fi
 
  sleep 1
  # Cleaning up unused pids
  rm "$web_server_pid_path" 2>/dev/null
  # rm "$sidekiq_pid_path" # Sidekiq seems to be cleaning up it's own pid.

  print_status
}

## Prints the status of kodiak and it's components.
print_status() {
  check_status
  if [ "$web_status" != "0" -a "$sidekiq_status" != "0" ]; then
    echo "kodiak is not running."
    return
  fi
  if [ "$web_status" = "0" ]; then
      echo "The kodiak puma web server with pid $wpid is running."
  else
      printf "The kodiak puma web server is \033[31mnot running\033[0m.\n"
  fi
 
}

## Tells puma to reload it's config and Sidekiq to restart
reload_kodiak(){
  exit_if_not_running
  if [ "$wpid" = "0" ];then
    echo "The kodiak puma Web server is not running thus its configuration can't be reloaded."
    exit 1
  fi
  printf "Reloading kodiak puma configuration... "
  RAILS_ENV=$RAILS_ENV bin/web reload
  echo "Done."
  
  wait_for_pids
  print_status
}

## Restarts Sidekiq and puma.
restart_kodiak(){
  check_status
  if [ "$web_status" = "0" -o "$sidekiq_status" = "0" ]; then
    stop_kodiak
  fi
  start_kodiak
}


### Finally the input handling.

case "$1" in
  start)
        start_kodiak
        ;;
  stop)
        stop_kodiak
        ;;
  restart)
        restart_kodiak
        ;;
  reload|force-reload)
	reload_kodiak
        ;;
  status)
        print_status
        exit $kodiak_status
        ;;
  *)
        echo "Usage: service kodiak {start|stop|restart|reload|status}"
        exit 1
        ;;
esac

exit
